{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ChenL\\\\Desktop\\\\supaps-bs\\\\src\\\\components\\\\Benefit\\\\LineChart.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from 'react';\nimport * as echarts from 'echarts';\nimport { px } from '../../shared/px';\nimport './index.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LineChart() {\n  _s();\n\n  const divRef = useRef(null);\n  const myChart = useRef(null);\n\n  const renderMyChart = data => {\n    var options = {\n      textStyle: {\n        fontSize: px(12),\n        color: '#79839E'\n      },\n      grid: {\n        x: px(45),\n        y: px(40),\n        x2: px(20),\n        y2: px(40)\n      },\n      xAxis: {\n        type: 'category',\n        boundaryGap: false,\n        data: data.map(i => i.month),\n        splitLine: {\n          show: true,\n          lineStyle: {\n            color: '#073E78'\n          }\n        },\n        axisTick: {\n          show: false\n        },\n        axisLine: {\n          show: false\n        }\n      },\n      yAxis: {\n        type: 'value',\n        splitLine: {\n          lineStyle: {\n            color: '#073E78'\n          }\n        },\n        axisLabel: {\n          formatter(val) {\n            return val * 100 + '%';\n          }\n\n        }\n      },\n      series: [{\n        type: 'line',\n        data: data.map(i => i.value),\n        symbol: 'circle',\n        symbolSize: px(12),\n        itemStyle: {},\n        lineStyle: {\n          width: px(2)\n        },\n        areaStyle: {\n          color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n            offset: 0,\n            color: '#ebdba4'\n          }, {\n            offset: 1,\n            color: '#e69d87'\n          }])\n        }\n      }]\n    };\n    myChart.current.setOption(options);\n  }; //动态获取数据\n\n\n  useEffect(() => {\n    setInterval(() => {\n      const newData = [{\n        month: '1',\n        value: Math.random()\n      }, {\n        month: '2',\n        value: Math.random()\n      }, {\n        month: '3',\n        value: Math.random()\n      }, {\n        month: '4',\n        value: Math.random()\n      }, {\n        month: '5',\n        value: Math.random()\n      }, {\n        month: '6',\n        value: Math.random()\n      }, {\n        month: '7',\n        value: Math.random()\n      }, {\n        month: '8',\n        value: Math.random()\n      }, {\n        month: '9',\n        value: Math.random()\n      }, {\n        month: '10',\n        value: Math.random()\n      }, {\n        month: '11',\n        value: Math.random()\n      }, {\n        month: '12',\n        value: Math.random()\n      }];\n      renderMyChart(newData);\n    }, 1500);\n  }, []); //初始化数据\n\n  useEffect(() => {\n    myChart.current = echarts.init(divRef.current);\n    renderMyChart([]);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bordered benefit\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u6548\\u76CA\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: divRef,\n      className: \"chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LineChart, \"RNxlMRn2CCBo0do41gnpH0hWAk8=\");\n\n_c = LineChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"LineChart\");","map":{"version":3,"sources":["C:/Users/ChenL/Desktop/supaps-bs/src/components/Benefit/LineChart.jsx"],"names":["React","useRef","useEffect","echarts","px","LineChart","divRef","myChart","renderMyChart","data","options","textStyle","fontSize","color","grid","x","y","x2","y2","xAxis","type","boundaryGap","map","i","month","splitLine","show","lineStyle","axisTick","axisLine","yAxis","axisLabel","formatter","val","series","value","symbol","symbolSize","itemStyle","width","areaStyle","graphic","LinearGradient","offset","current","setOption","setInterval","newData","Math","random","init"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect } from 'react'\r\nimport * as echarts from 'echarts'\r\nimport { px } from '../../shared/px'\r\nimport './index.scss'\r\n\r\nexport default function LineChart () {\r\n  const divRef = useRef(null)\r\n  const myChart = useRef(null)\r\n\r\n  const renderMyChart = data => {\r\n    var options = {\r\n      textStyle: {\r\n        fontSize: px(12),\r\n        color: '#79839E'\r\n      },\r\n      grid: {\r\n        x: px(45),\r\n        y: px(40),\r\n        x2: px(20),\r\n        y2: px(40)\r\n      },\r\n      xAxis: {\r\n        type: 'category',\r\n        boundaryGap: false,\r\n        data: data.map(i=>i.month),\r\n        splitLine: { show: true, lineStyle: { color: '#073E78' } },\r\n        axisTick: { show: false },\r\n        axisLine: { show: false }\r\n      },\r\n      yAxis: {\r\n        type: 'value',\r\n        splitLine: { lineStyle: { color: '#073E78' } },\r\n        axisLabel: {\r\n          formatter (val) {\r\n            return val * 100 + '%'\r\n          }\r\n        }\r\n      },\r\n      series: [\r\n        {\r\n          type: 'line',\r\n          data: data.map(i=>i.value),\r\n          symbol: 'circle',\r\n          symbolSize: px(12),\r\n          itemStyle:{\r\n            \r\n          },\r\n          lineStyle: { width: px(2) },\r\n          areaStyle: {\r\n            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\r\n              {\r\n                offset: 0,\r\n                color: '#ebdba4'\r\n              },\r\n              {\r\n                offset: 1,\r\n                color: '#e69d87'\r\n              }\r\n            ])\r\n          }\r\n        }\r\n      ]\r\n    }\r\n    myChart.current.setOption(options)\r\n  }\r\n  //动态获取数据\r\n  useEffect(() => {\r\n    setInterval(() => {\r\n      const newData = [\r\n        { month: '1', value: Math.random() },\r\n        { month: '2', value: Math.random() },\r\n        { month: '3', value: Math.random() },\r\n        { month: '4', value: Math.random() },\r\n        { month: '5', value: Math.random() },\r\n        { month: '6', value: Math.random() },\r\n        { month: '7', value: Math.random() },\r\n        { month: '8', value: Math.random() },\r\n        { month: '9', value: Math.random() },\r\n        { month: '10', value: Math.random() },\r\n        { month: '11', value: Math.random() },\r\n        { month: '12', value: Math.random() }\r\n      ]\r\n      renderMyChart(newData)\r\n    }, 1500)\r\n  }, [])\r\n  //初始化数据\r\n  useEffect(() => {\r\n    myChart.current = echarts.init(divRef.current)\r\n    renderMyChart([])\r\n  }, [])\r\n  return (\r\n    <div className='bordered benefit'>\r\n      <h2>效益</h2>\r\n      <div ref={divRef} className='chart'></div>\r\n    </div>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}