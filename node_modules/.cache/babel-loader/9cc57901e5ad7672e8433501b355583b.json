{"ast":null,"code":"// import React from 'react';\nimport axios from 'axios';\nimport baseUrl from './baseUrl'; // Full config:  https://github.com/axios/axios#request-config\n// axios.defaults.baseURL = 'http://192.168.3.137:8080';\n// axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n//  axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n\n/**\r\n * 服务端api路径\r\n * @type {string}\r\n */\n// let baseUrl = \"192.168.95.147:18888/\";\n//\n\nconst config = {\n  // baseURL: process.env.baseURL || process.env.apiUrl || \"\"\n  timeout: 60 * 1000,\n  // Timeout\n  // withCredentials: true, // Check cross-site Access-Control\n  baseURL: `http://${baseUrl}` // baseURL: \"http://127.0.0.1:8080/\"\n\n};\n\nconst _axios = axios.create(config);\n\n_axios.interceptors.request.use( // eslint-disable-next-line no-shadow\nconfig => {\n  // Do something before request is sent\n  // if (config.url.lastIndexOf('msService') === -1 && !config.headers.Authorization && store.tokenStore.isLogin) {\n  //   config.headers.common.authorization = `bearer ${store.tokenStore.tokenData.access_token}`;\n  // }\n  return config;\n}, error => {\n  // Do something with request error\n  // route.replace(\"/login\");\n  return Promise.reject(error);\n}); // // 是否正在刷新的标记\n// let isRefreshing = false;\n//\n// // 重试队列，每一项将是一个待执行的函数形式\n// let retryRequests = [];\n// let alert = false;\n// let alertTimeOut = null;\n// Add a response interceptor\n\n\n_axios.interceptors.response.use(response => {\n  // Do something with response data\n  return response;\n}, error => {\n  // Do something with response error\n  // if (error.toString().includes('500')) {\n  //   // Modal.warning({\n  //   //   title: '警告！',\n  //   //   content: '服务器错误'\n  //   // });\n  //   return Promise.reject(error);\n  // }\n  // if (error.toString().includes('401') && store.tokenStore.isLogin) {\n  //   if (!isRefreshing) {\n  //     isRefreshing = true;\n  //\n  //     new Promise((resolve) => {\n  //       store.tokenStore.resToken().then((r) => {\n  //         console.log('resToken');\n  //         history.go(0);\n  //         resolve(r);\n  //       });\n  //     }).then(() => {\n  //       setTimeout(() => {\n  //         const reqs = retryRequests;\n  //         retryRequests = [];\n  //         isRefreshing = false;\n  //         reqs.forEach((v) => v());\n  //       }, 3000);\n  //     });\n  //   } else if (error.config.url.endsWith('token')) {\n  //     if (store.tokenStore.isLogin) {\n  //       if (alertTimeOut == null) {\n  //         alertTimeOut = setTimeout(() => {\n  //           Modal.confirm({\n  //             title: '警告！',\n  //             content: '登录已过期',\n  //             onOk() {\n  //               return new Promise((resolve) => {\n  //                 history.push('/ipd/login');\n  //                 history.go(0);\n  //                 alert = false;\n  //                 resolve();\n  //               });\n  //             },\n  //             onCancel() {}\n  //           });\n  //         }, 1000);\n  //       }\n  //     }\n  //     return Promise.reject(error);\n  //   }\n  //   console.log('401');\n  //   if (error.config.retryCount < 5 || !error.config.retryCount) {\n  //     if (!error.config.retryCount) {\n  //       error.config.retryCount = 0;\n  //     }\n  //     // eslint-disable-next-line operator-assignment\n  //     error.config.retryCount = error.config.retryCount + 1;\n  //\n  //     // 正在刷新token，返回一个未执行resolve的promise\n  //     return new Promise((resolve) => {\n  //       // 将resolve放进队列，用一个函数形式来保存，等token刷新后直接执行\n  //       // @ts-ignore\n  //\n  //       retryRequests.push(() => {\n  //         resolve(window.axios(error.config));\n  //       });\n  //     });\n  //   }\n  // } else if (error.toString().includes('403') && !alert) {\n  //   alert = true;\n  //   if (store.tokenStore.isLogin) {\n  //     Modal.confirm({\n  //       title: '警告！',\n  //       content: '权限不足',\n  //       onOk() {\n  //         return new Promise(() => {\n  //           alert = false;\n  //         }).catch(() => console.log('Oops errors!'));\n  //       },\n  //       onCancel() {}\n  //     });\n  //   }\n  // } else if (!store.tokenStore.isLogin) {\n  //   if (retryRequests.length === 0) {\n  //     if (alertTimeOut == null) {\n  //       alertTimeOut = setTimeout(() => {\n  //         Modal.confirm({\n  //           title: '警告！',\n  //           content: '请先登录',\n  //           onOk() {\n  //             return new Promise((resolve) => {\n  //               history.push('/ipd/login');\n  //               history.go(0);\n  //               alert = false;\n  //               resolve();\n  //             });\n  //           },\n  //           onCancel() {}\n  //         });\n  //       }, 1000);\n  //     } else {\n  //       window.clearTimeout(alertTimeOut);\n  //       alertTimeOut = null;\n  //     }\n  //   } else {\n  //     retryRequests = [];\n  //   }\n  // }\n  return Promise.reject(error);\n});\n\nexport default _axios;","map":{"version":3,"sources":["C:/Users/ChenL/Desktop/大屏/supaps-bs/src/plugins/axios.js"],"names":["axios","baseUrl","config","timeout","baseURL","_axios","create","interceptors","request","use","error","Promise","reject","response"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB,C,CAEA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,MAAM,GAAG;AACb;AACAC,EAAAA,OAAO,EAAE,KAAK,IAFD;AAEO;AACpB;AACAC,EAAAA,OAAO,EAAG,UAASH,OAAQ,EAJd,CAKb;;AALa,CAAf;;AAQA,MAAMI,MAAM,GAAGL,KAAK,CAACM,MAAN,CAAaJ,MAAb,CAAf;;AAEAG,MAAM,CAACE,YAAP,CAAoBC,OAApB,CAA4BC,GAA5B,EAEE;AACCP,MAAD,IAAY;AACV;AACA;AACA;AACA;AAEA,SAAOA,MAAP;AACD,CAVH,EAWGQ,KAAD,IAAW;AACT;AACA;AAEA,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAhBH,E,CAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACAL,MAAM,CAACE,YAAP,CAAoBM,QAApB,CAA6BJ,GAA7B,CACGI,QAAD,IAAceF,KAAf,CAAP;AACD,CAlHH;;AAqHA,eAAeL,MAAf","sourcesContent":["// import React from 'react';\r\nimport axios from 'axios';\r\nimport baseUrl from './baseUrl';\r\n\r\n// Full config:  https://github.com/axios/axios#request-config\r\n// axios.defaults.baseURL = 'http://192.168.3.137:8080';\r\n// axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\r\n//  axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\r\n/**\r\n * 服务端api路径\r\n * @type {string}\r\n */\r\n// let baseUrl = \"192.168.95.147:18888/\";\r\n//\r\nconst config = {\r\n  // baseURL: process.env.baseURL || process.env.apiUrl || \"\"\r\n  timeout: 60 * 1000, // Timeout\r\n  // withCredentials: true, // Check cross-site Access-Control\r\n  baseURL: `http://${baseUrl}`\r\n  // baseURL: \"http://127.0.0.1:8080/\"\r\n};\r\n\r\nconst _axios = axios.create(config);\r\n\r\n_axios.interceptors.request.use(\r\n\r\n  // eslint-disable-next-line no-shadow\r\n  (config) => {\r\n    // Do something before request is sent\r\n    // if (config.url.lastIndexOf('msService') === -1 && !config.headers.Authorization && store.tokenStore.isLogin) {\r\n    //   config.headers.common.authorization = `bearer ${store.tokenStore.tokenData.access_token}`;\r\n    // }\r\n\r\n    return config;\r\n  },\r\n  (error) => {\r\n    // Do something with request error\r\n    // route.replace(\"/login\");\r\n\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// // 是否正在刷新的标记\r\n// let isRefreshing = false;\r\n//\r\n// // 重试队列，每一项将是一个待执行的函数形式\r\n// let retryRequests = [];\r\n// let alert = false;\r\n// let alertTimeOut = null;\r\n\r\n// Add a response interceptor\r\n_axios.interceptors.response.use(\r\n  (response) => {\r\n    // Do something with response data\r\n\r\n    return response;\r\n  },\r\n  (error) => {\r\n    // Do something with response error\r\n    // if (error.toString().includes('500')) {\r\n    //   // Modal.warning({\r\n    //   //   title: '警告！',\r\n    //   //   content: '服务器错误'\r\n    //   // });\r\n    //   return Promise.reject(error);\r\n    // }\r\n    // if (error.toString().includes('401') && store.tokenStore.isLogin) {\r\n    //   if (!isRefreshing) {\r\n    //     isRefreshing = true;\r\n    //\r\n    //     new Promise((resolve) => {\r\n    //       store.tokenStore.resToken().then((r) => {\r\n    //         console.log('resToken');\r\n    //         history.go(0);\r\n    //         resolve(r);\r\n    //       });\r\n    //     }).then(() => {\r\n    //       setTimeout(() => {\r\n    //         const reqs = retryRequests;\r\n    //         retryRequests = [];\r\n    //         isRefreshing = false;\r\n    //         reqs.forEach((v) => v());\r\n    //       }, 3000);\r\n    //     });\r\n    //   } else if (error.config.url.endsWith('token')) {\r\n    //     if (store.tokenStore.isLogin) {\r\n    //       if (alertTimeOut == null) {\r\n    //         alertTimeOut = setTimeout(() => {\r\n    //           Modal.confirm({\r\n    //             title: '警告！',\r\n    //             content: '登录已过期',\r\n    //             onOk() {\r\n    //               return new Promise((resolve) => {\r\n    //                 history.push('/ipd/login');\r\n    //                 history.go(0);\r\n    //                 alert = false;\r\n    //                 resolve();\r\n    //               });\r\n    //             },\r\n    //             onCancel() {}\r\n    //           });\r\n    //         }, 1000);\r\n    //       }\r\n    //     }\r\n    //     return Promise.reject(error);\r\n    //   }\r\n    //   console.log('401');\r\n    //   if (error.config.retryCount < 5 || !error.config.retryCount) {\r\n    //     if (!error.config.retryCount) {\r\n    //       error.config.retryCount = 0;\r\n    //     }\r\n    //     // eslint-disable-next-line operator-assignment\r\n    //     error.config.retryCount = error.config.retryCount + 1;\r\n    //\r\n    //     // 正在刷新token，返回一个未执行resolve的promise\r\n    //     return new Promise((resolve) => {\r\n    //       // 将resolve放进队列，用一个函数形式来保存，等token刷新后直接执行\r\n    //       // @ts-ignore\r\n    //\r\n    //       retryRequests.push(() => {\r\n    //         resolve(window.axios(error.config));\r\n    //       });\r\n    //     });\r\n    //   }\r\n    // } else if (error.toString().includes('403') && !alert) {\r\n    //   alert = true;\r\n    //   if (store.tokenStore.isLogin) {\r\n    //     Modal.confirm({\r\n    //       title: '警告！',\r\n    //       content: '权限不足',\r\n    //       onOk() {\r\n    //         return new Promise(() => {\r\n    //           alert = false;\r\n    //         }).catch(() => console.log('Oops errors!'));\r\n    //       },\r\n    //       onCancel() {}\r\n    //     });\r\n    //   }\r\n    // } else if (!store.tokenStore.isLogin) {\r\n    //   if (retryRequests.length === 0) {\r\n    //     if (alertTimeOut == null) {\r\n    //       alertTimeOut = setTimeout(() => {\r\n    //         Modal.confirm({\r\n    //           title: '警告！',\r\n    //           content: '请先登录',\r\n    //           onOk() {\r\n    //             return new Promise((resolve) => {\r\n    //               history.push('/ipd/login');\r\n    //               history.go(0);\r\n    //               alert = false;\r\n    //               resolve();\r\n    //             });\r\n    //           },\r\n    //           onCancel() {}\r\n    //         });\r\n    //       }, 1000);\r\n    //     } else {\r\n    //       window.clearTimeout(alertTimeOut);\r\n    //       alertTimeOut = null;\r\n    //     }\r\n    //   } else {\r\n    //     retryRequests = [];\r\n    //   }\r\n    // }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default _axios;\r\n"]},"metadata":{},"sourceType":"module"}